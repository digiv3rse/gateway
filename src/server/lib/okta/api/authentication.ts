import { Token } from '@/server/models/okta/Token';
import { buildUrl } from '@/shared/lib/routeUtils';
import { fetch } from '@/server/lib/fetch';
import { joinUrl } from '@guardian/libs';
import {
  authorizationHeader,
  defaultHeaders,
} from '@/server/lib/okta/api/headers';
import { getConfiguration } from '@/server/lib/getConfiguration';
import { Response } from 'node-fetch';
import { handleErrorResponse } from '@/server/lib/okta/api/errors';
import { OktaAPIResponseParsingError } from '@/server/models/okta/Error';

const { okta } = getConfiguration();

/**
 * Okta's Authentication API endpoints, see - https://developer.okta.com/docs/reference/api/authn/
 */

/**
 * @param body.username User's short-name (for example: dade.murphy) or unique fully-qualified sign in
 * name (for example: dade.murphy@example.com)
 * @param body.password User's password credential
 * @param body.token Token received as part of activation user request. This token is emailed to the user
 * when they register, and can be (re)generated by calling the activate or reactivate endpoints in the Users API
 * see ~/src/server/lib/okta/api/users.ts
 */
export const authenticate = async (body: {
  username?: string;
  password?: string;
  token?: string;
}): Promise<Token> => {
  const path = buildUrl('/api/v1/authn');
  return await fetch(joinUrl(okta.orgUrl, path), {
    method: 'POST',
    body: JSON.stringify(body),
    headers: defaultHeaders,
  }).then(handleTokenResponse);
};

/**
 * @param body.stateToken State token for the current transaction. State tokens can be obtained by starting a forgotten
 * password flow or admin-initiated reset password flow or by passing an activation token into the /authn endpoint
 * @param body.newPassword User's new password
 */
export const resetPassword = async (body: {
  stateToken: string;
  newPassword: string;
}): Promise<Token> => {
  const path = buildUrl('/api/v1/authn/credentials/reset_password');
  return await fetch(joinUrl(okta.orgUrl, path), {
    method: 'POST',
    body: JSON.stringify(body),
    headers: { ...defaultHeaders, ...authorizationHeader() },
  }).then(handleTokenResponse);
};

const handleTokenResponse = async (response: Response): Promise<Token> => {
  if (response.ok) {
    try {
      return await response.json().then((json) => {
        const token = json as Token;
        return {
          stateToken: token.stateToken,
          sessionToken: token.sessionToken,
          expiresAt: token.expiresAt,
        };
      });
    } catch (error) {
      throw new OktaAPIResponseParsingError(`${error}`);
    }
  } else {
    return await handleErrorResponse(response);
  }
};
